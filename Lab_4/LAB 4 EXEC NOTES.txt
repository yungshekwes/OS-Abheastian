Notes for Lab 4 OS Exec:


1. Write a program "exec" generated by a makefile
Binary = program to be executed
Arguments = arguments for program
Research fopen()
Everything will be included in the Makefile

Any contents provided on STDIN should be untouched (i.e. you should not read from STDIN, so that it can be consumed by the exec-ed program

STEPS:

1) Open the given binary, read the ELF headers and perform some sanity checks. For example,
make sure the file is an ELF file and make sure that the values in the ELF header are usable
for your application (for example, you cannot accept a binary compiled for ARM). You can
use fopen, fread, fseek, and similar functions to work with the file.

2) Load all ‘segments’ of type LOAD into memory. This memory needs to be contiguous, in order
to keep the relative pointers valid.
	a) For this, first determine the total span of all loadable segments (i.e. the start address
	of the first loadable segment until the end address of the last one) and allocate this
	amount of memory. Use mmap() for this.
	b) Fill the allocated memory with the binary contents properly, taking into account all
	offsets so that the binary ‘structure’ is preserved.
	c) Finally, protect the memory regions with the correct flags (as obtained from the program
	header) to enable execute- or write-access to the relevant regions.
3) BONUS: If the binary is dynamically linked, load the interpreter specified in the INTERP segment
by repeating the steps above.

4) Construct a new, fresh stack for the new program with the exact structure as discussed in
appendix C. An easy trick for saving some errorprone work is also discussed there.

5) Set the exit point (register %rdx), load the stack pointer, and jump to the entry point of the
new binary (or the interpreter). Since this needs to be done in assembly, the implementation
for this is already provided on Brightspace, but you will still need to call this code yourself.
