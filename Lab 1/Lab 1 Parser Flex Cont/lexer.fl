/**
 * This is an example minimal parser in just flex for the grammar of Shell part 1.
 * 
 * This does not contain any logic for executing the commands, but it should serve
 * as a basis on top of which you can easily continue. Throughout the file, we have
 * included some comments and instructions on how to expand.
 * 
 * Floris Westerman, 2022
 */

/* Here we enter a section that is copied verbatim to the output */
%{
// Headers for use in this file
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include "parser.tab.h"


//////////// Here you can put some helper functions and code, but make sure to properly
//////////// separate your code in logical "entities" in different files! This helps
//////////// us grade your code as well.
#define MAX_ARGS 100 // Maximum number of arguments for execve

char* args[MAX_ARGS+1]; // Arguments for execve, plus one for NULL termination

int idx = 0; // Index of the current argument being parsed

static void eat();
void executeCommand();

%}

/**
 * Parsing in flex is done based on a series of regexes. Below, we list these regexes
 * in order, flex will try to match the input with these in order. As soon as any regex
 * matches, it will run the code associated with it. Because of this order, we should
 * put our more specific regexes at the top: put a match for "exit" before a general
 * string regex.
 *
 * Optionally, you can specify a "start condition" (you can see it as some sort of
 * context) for a rule. This causes the regex to only be tried when the parsing is
 * in this context. You can control the current context using BEGIN(). The default
 * start condition is "INITIAL". So below, as soon as we hit a " char, we enter the
 * "STRING" context that will enable us to match any character until the next ",
 * after which we return to the "INITIAL" context.
 *
 * You could decide to hook up Bison to this part as well, as can be seen in many
 * tutorials online. Then you would store/return tokens from the actions in these rules.
 * However, for the scope of this simple grammar for the shell, that is really not
 * necessary and a few state variables should suffice to get the functionality you need!
 */

/* Here we inform flex that we have two additional "start conditions", besides INITIAL */
%x string error

/* Here we inform flex to not "look ahead" in stdin beyond what is necessary, to prevent
 * issues with passing stdin to another executable. */
%option always-interactive

%%
    /* From here on, comments must be indented! */

    /* Here we start with the rules. The highest priority rules are those to accept any
     * symbol when we are reading a string (so in the STRING context). */
    
    /* The first rule is to match the closing " char */
<string>"\""        BEGIN(INITIAL); /* Return to normal parsing */

    /* The second rule takes the longest string of characters not being " */
<string>[^\"]+      {
                        /* Here we match any entire string. We should either make this
                         * the command to execute, or store this as an option, or it is
                         * a filename, depending on the current state! */

                        // Entire string value is available in yytext with length yyleng
                        // Make sure to copy it!

                        //printf("STRING: %s\n", yytext);
                        args[idx++] = strdup(yytext);

                        //////////// Put your code here!
                    }

    /* Here we have cases for error handling - when we have encountered an invalid syntax,
     * we want to discard the entire line so we continue until the next newline symbol. */
<error>\n           BEGIN(INITIAL); /* Return to normal parsing */
<error>.

    /* From here on, we have only "normal" rules for our parsing */

    /* Built-in commands */
"exit"              {
                        /* For built-in command names, make sure that we are not currently
                         * parsing options or some other place where we cannot reasonably
                         * come across an actual "exit" command. So only perform some action
                         * here if you are sure that it is safe and valid to do so, otherwise
                         * use REJECT to let flex continue to the next match (as a string,
                         * later on). */

                        //////////// Put your code here!

                        REJECT;
                    }

    /* Other grammar parts */
"\""                BEGIN(string); /* We start reading a string until the next " char */
"&&"                {   
                        // eat();
                        // return AND;
                        // printf("Performing &&\n");
                        executeCommand();

                        //////////// Put your code here!
                    }
"||"                {   
                        // eat();
                        // return OR;
                        // printf("Performing ||\n");
                        executeCommand();

                        //////////// Put your code here!
                    }
;                   {   
                        // eat();
                        // printf("Performing ;\n");
                        executeCommand();

                        //////////// Put your code here!
                    }
\n                  {
                        // eat();
                        // printf("\n");
                        executeCommand();

                        //////////// Put your code here!
                    }
[ \t]+              {
                        // eat();
                        /* Ignore whitespace */
                    }
[^ ;\t\n\"\^|]+     {
                        /* Here we match any sequence of characters without whitespace as a
                         * "word" or so. We should either make this the command to execute,
                         * or store this as an option, or it is a filename, depending on the
                         * current state! */

                        // Entire string value is available in yytext with length yyleng
                        // Make sure to copy it!
                        //printf("WORD: %s\n", yytext);

                        
                        args[idx++] = strdup(yytext);
                        yylval.strval = strdup(yytext); eat(); return CONARG;

                        //////////// Put your code here!
                    }
<<EOF>>             {
                        /* At EOF we should unconditionally terminate! */
                        yyterminate();
                    }
.                   {   
                        // eat();
                        /* Error: unknown character! (probably doesn't happen) */
                        //fprintf(stdout, "Unrecognized character: %s\n", yytext );
                        BEGIN(error);
                    }

%%

void initLexer(FILE *f) {
  int length;
  fseek (f, 0, SEEK_END);
  length = ftell (f);
  fseek (f, 0, SEEK_SET);
  inputbuffer = malloc (length+1);
  inputbuffer[length]='\0';
  length = fread (inputbuffer, 1, length, f);
  fseek (f, 0, SEEK_SET);
  yyin = f;
}

void showErrorLine() {
  char *p = inputbuffer;
  int line = linenr;
  while ((*p != '\0') && (line > 1)) {
    line -= (*p == '\n');
    p++;
  }
  printf("line %3d: ", linenr);
  while ((*p != '\0') && (*p != '\n')) {
    putchar(*p != '\t' ? *p : ' ');
    p++;
  }
  putchar('\n');
  printf("---------");
  for (int i=colnr-strlen(yytext); i>0; i--) {
    putchar('-');
  }
  printf("^\n");
}
 
void finalizeLexer() {
  free(inputbuffer);
  yylex_destroy();
}

void executeCommand() {
    // case where there is no command to execute
    if (idx == 0) {
        return;
    }

    // NULL terminating the argument list
    args[idx] = NULL;

    // debug to see if argument list is filled
    // it is
    /**
    for (int i = 0; i < idx; i++) {
        printf("%s, ", args[i]);
    }
    **/

    pid_t pid;
    pid = fork(); 
    if (pid < 0) {
        // case where fork failed
        fprintf(stdout, "fork() could not create a child process!");
        exit(0);
    } else if (pid == 0) {
        // case of child fork
        
        if (execvp(args[0], args) == -1) {
            printf("Invalid arguments or command\n");
            exit(EXIT_FAILURE);
        }        
    } else {
        // case of parent fork
        int status;
        if (waitpid(pid, &status, 0) == -1) {
            printf("Child process not ended\n");
            return;
        }
        if (WIFEXITED(status) && WEXITSTATUS(status) != EXIT_SUCCESS) {
            fprintf(stdout, "Command failed with exit status %d\n", WEXITSTATUS(status));
        }
    }

    // freeing argument strings
    for (int i = 0; i < idx; i++) {
        free(args[i]);
    }

    idx = 0;
}

static void eat() {
  char *s;
  for (s=yytext; *s; s++) {
    if (*s == '\n') {
      linenr++;
      colnr = 0;
    } 
    colnr++;
  }
}

/* All code after the second pair of %% is just plain C where you typically
 * write your main function and such. */

int main(int argc, char *argv[]) {
    // Initialize program
    setbuf(stdin, NULL);
    setbuf(stdout, NULL);

    // Start parsing process
    yylex();
    //

    // Cleanup
    fclose(yyin);
    yylex_destroy();

    return EXIT_SUCCESS;
}
